generator client {
  provider = "prisma-client-js"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./YouTubeMate-ERD.md"
  title    = "YouTubeMate"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This comment will get attached to the `User` node in the AST
model User {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  
  /// Name of user.
  name          String?

  /// Email address.
  ///
  /// @format email
  email         String?   @unique

  /// Email Verification time of user.
  emailVerified DateTime?

  /// Avatar of user.
  image         String?

  //----
  // RELATIONS
  //----
  /// List of user accounts.
  accounts      Account[]

  /// List of user sessions.
  sessions      Session[]

  /// List of user watchlists.
  lists         List[]

  /// User settings.
  settings      UserSettings?

  /// Creation time of user.
  createdAt     DateTime  @default(now())

  /// Update time of user.
  updatedAt     DateTime  @updatedAt
}

enum ColorScheme {
  System
  Dark
  Light
}

/// This comment will get attached to the `UserSettings` node in the AST
model UserSettings {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  /// Whether the user is onboarded or not.
  onboarded   Boolean     @default(false)
  colorScheme ColorScheme @default(System)

  //----
  // RELATIONS
  //----
  /// Belong user info.
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  /// Belong user id.
  /// @format uuid
  userId      String      @unique @db.Uuid
  
  //----
  // RELATIONS
  //----
  /// Belong locale info.
  locale      Locale      @relation(fields: [localeId], references: [id], onDelete: Cascade)
  
  /// Belong locale id.
  ///
  /// @maxLength 15
  localeId    String      @db.VarChar(15)
}

/// This comment will get attached to the `Locale` node in the AST
model Locale {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @maxLength 15
  id           String         @unique @db.VarChar(15)
  
  /// Locale language code.
  languageCode String
  
  /// Locale country code.
  countryCode  String?
  
  /// Locale script.
  script       String?

  /// Formal locale name.
  formalName   String

  /// Native locale name.
  nativeName   String
  
  /// Common locale name.
  commonName   String?

  //----
  // RELATIONS
  //----
  /// Belong user settings list.
  UserSettings UserSettings[]
}

/// This comment will get attached to the `Account` node in the AST
model Account {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  
  /// Belong user id.
  /// @format uuid
  userId            String  @db.Uuid
  
  /// Account type.
  type              String

  /// Account provider.
  provider          String

  /// Account provider id.
  providerAccountId String
  
  /// Account refresh token.
  refresh_token     String? @map("refreshToken") @db.Text

  /// Account access token.
  access_token      String? @map("accessToken") @db.Text
  
  /// Expiration day(s) value.
  ///
  /// @format uint 
  /// @minimum 1
  expires_at        Int?    @map("expiresAt")
  
  /// Account token type.
  token_type        String? @map("tokenType")
  
  /// Account scope.
  scope             String?
  
  /// Account token id.
  id_token          String? @map("idToken") @db.Text
  
  /// Account session state.
  session_state     String? @map("sessionState")

  //----
  // RELATIONS
  //----
  /// Belong user info.
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// This comment will get attached to the `Session` node in the AST
model Session {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  
  /// Session token.
  sessionToken String   @unique

  /// Belong user id.
  userId       String   @db.Uuid

  /// Expiration session date.
  expires      DateTime
  
  //----
  // RELATIONS
  //----
  /// Belong user info.
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// This comment will get attached to the `VerificationToken` node in the AST
model VerificationToken {
  /// Verification token identifier.
  identifier String

  /// Verification token.
  token      String   @unique

  /// Verification token expiration date.
  expires    DateTime

  @@unique([identifier, token])
}

enum Visibility {
  Public
  Unlisted
  Private
}

/// This comment will get attached to the `List` node in the AST
model List {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  
  /// List title.
  title        String

  /// List description.
  description String?

  /// Visibility of list.
  visibility  Visibility
  
  //----
  // RELATIONS
  //----
  /// Belong creator info.
  creator     User       @relation(fields: [userId], references: [id])
  
  /// Belong user id.
  userId      String     @db.Uuid

  /// Belong items list.
  items       ListItem[]
  
  /// Creation time of list.
  createdAt   DateTime   @default(now())

  /// Update time of list.
  updatedAt   DateTime   @updatedAt
}

enum ListItemType {
  YouTubeChannel
}

/// This comment will get attached to the `ListItem` node in the AST
model ListItem {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id             Int          @id @default(autoincrement())
  
  /// List item name.
  name           String

  /// List item description.
  description    String?

  //----
  // RELATIONS
  //----
  /// Belong list item meta.
  meta           ListItemMeta @relation(fields: [listItemMetaId], references: [id])
  
  //----
  // RELATIONS
  //----
  /// Belong list.
  list           List         @relation(fields: [listId], references: [id])
  
  /// Belong list id.
  listId         String       @db.Uuid
  
  /// Belong list item meta id.
  listItemMetaId String       @db.Uuid
  
  /// Creation time of list item.
  createdAt      DateTime     @default(now())

  /// Update time of list item.
  updatedAt      DateTime     @updatedAt
}

/// This comment will get attached to the `ListItemMeta` node in the AST
model ListItemMeta {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id                  String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  
  /// List item meta name.
  name                String
  
  /// List item meta origin id.
  originId            String

  /// List item meta type.
  type                ListItemType
  
  /// Belong items list.
  listItem            ListItem[]

  /// List item meta image url.
  imageUrl            String

  //----
  // RELATIONS
  //----
  /// Belong YouTube meta.
  youtubeMeta         YouTubeMeta? @relation(fields: [youTubeMetaOriginId], references: [originId])

  /// Belong YouTube meta origin id.
  youTubeMetaOriginId String?
  
  /// Creation time of list item meta.
  createdAt           DateTime     @default(now())

  /// Update time of list item meta.
  updatedAt           DateTime     @updatedAt
}

model YouTubeMeta {
  //----
  // COLUMNS
  //----
  /// YouTube meta origin id.
  originId        String         @unique

  /// YouTube meta name.
  name            String
  
  /// YouTube meta description.
  description     String

  /// YouTube meta subscriber count.
  subscriberCount Int

  /// YouTube meta video count.
  videoCount Int

  /// YouTube meta view count.
  viewCount Int

  /// YouTube meta country code.
  countryCode  String?

  /// YouTube meta favorites playlist.
  favoritesPlaylist String?

  /// YouTube meta likes playlist.
  likesPlaylist String?

  /// YouTube meta uploads playlist.
  uploadsPlaylist String?

  /// YouTube meta watch history playlist.
  watchHistoryPlaylist String?

  /// YouTube meta watch later playlist.
  watchLaterPlaylist String?
  
  /// YouTube meta avatar url.
  avatarUrl       String
  
  /// YouTube meta banner url.
  bannerUrl       String?
  
  /// YouTube meta custom url.
  customUrl       String
  
  /// YouTube meta is verified.
  isVerified      Boolean        @default(false)
  
  /// Belong lists of list item meta.
  ListItemMeta    ListItemMeta[]

  /// Creation time of YouTube meta.
  createdAt       DateTime       @default(now())

  /// Update time of YouTube meta.
  updatedAt       DateTime       @updatedAt
}